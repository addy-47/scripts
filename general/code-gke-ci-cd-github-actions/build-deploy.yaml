# This is a reusable workflow to build, scan, and deploy container images.
# It is called by the main orchestrator pipeline.

name: Build, Push, Scan, and Deploy

on:
  workflow_call:
    inputs:
      changed_dirs:
        required: true
        type: string
      image_tag:
        required: true
        type: string

env:
  MUXLY_GCP_PROJECT_ID: ${{ secrets.MUXLY_GCP_PROJECT_ID }}
  KB-NPRD_GCP_PROJECT_ID: ${{ secrets.KB_NPRD_GCP_PROJECT_ID }}
  GCP_REGION: asia-south1
  GAR_REPOSITORY: kbpipeline-uat-repo
  GKE_CLUSTER: kb-nprd-vertexai-gke-cluster-p1
  GKE_ZONE: asia-south1-c
  UAT_NAMESPACE: kbpipeline
  SERVICES: |
    kb-transcode-pipeline:kb-transcode-pipeline
    kbpipeline-deployment:kb-pipeline
    no-style-app-deployment:socket-nostyle
    socratic-app-deployment:socket_socratic
    story-telling-deployment:socket_storytelling
    web-search-ai-api:internet_search

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      security-events: write # For uploading container scan results

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Muxly GCP (for Artifact Registry)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.AR_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.AR_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-cloud-sdk/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Create Trivy reports directory
        run: mkdir -p trivy-reports

      - name: Build, Push, and Scan Images
        run: |
          echo "${{ env.SERVICES }}" | while IFS=: read -r workload dir; do
            if echo "${{ inputs.changed_dirs }}" | grep -q -w "$dir"; then
              echo " Changes detected in '$dir', processing image for '$workload'."
              IMAGE_PATH=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.MUXLY_GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/$dir:${{ inputs.image_tag }}
              
              echo "--- Building $IMAGE_PATH ---"
              docker build -t $IMAGE_PATH -f ./$dir/Dockerfile ./$dir
              
              echo "--- Pushing $IMAGE_PATH ---"
              docker push $IMAGE_PATH

              echo "--- Scanning $IMAGE_PATH for HIGH/CRITICAL vulnerabilities ---"
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache:/root/.cache \
                aquasec/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL --no-progress $IMAGE_PATH

              echo "--- Generating full SARIF report for $IMAGE_PATH ---"
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache:/root/.cache -v $(pwd)/trivy-reports:/reports \
                aquasec/trivy:latest image --format sarif --output /reports/trivy-$dir.sarif $IMAGE_PATH
            else
              echo " No changes in '$dir', skipping build for '$workload'."
            fi
          done

      - name: Authenticate to KB_NPRD GCP (for GKE)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GKE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GKE_SERVICE_ACCOUNT }}

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Upload Container Scan reports
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-reports

      - name: Patch Image Tags in GKE
        run: |
          echo "${{ env.SERVICES }}" | while IFS=: read -r workload dir; do
            if echo "${{ inputs.changed_dirs }}" | grep -q -w "$dir"; then
              echo " Deploying new image for '$workload' (container: '$dir')."
              IMAGE_PATH=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.MUXLY_GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/$dir:${{ inputs.image_tag }}
              kubectl patch deployment $workload -n ${{ env.UAT_NAMESPACE }} \
                --patch "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"$dir\",\"image\":\"$IMAGE_PATH\"}]}}}}"
              kubectl rollout restart deployment $workload -n ${{ env.UAT_NAMESPACE }}
            else
              echo " No new image for '$workload', skipping deployment."
            fi
          done