name: Update Apt Repository

on:
  workflow_run:
    workflows: ["Build Dockerz", "Build U-CLI"]
    types:
      - completed

jobs:
  update-repo:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout install branch
      uses: actions/checkout@v4
      with:
        ref: install
        path: install-repo

    - name: Download Dockerz artifacts
      uses: actions/download-artifact@v4
      with:
        name: dockerz-artifacts
        path: artifacts/dockerz/
      continue-on-error: true

    - name: Download U-CLI artifacts
      uses: actions/download-artifact@v4
      with:
        name: u-cli-artifacts
        path: artifacts/u-cli/
      continue-on-error: true

    - name: Update apt repository
      run: |
        cd install-repo

        # Copy .deb packages to apt directory
        if [ -f ../artifacts/dockerz/dockerz_amd64.deb ]; then
          cp ../artifacts/dockerz/dockerz_amd64.deb apt/dockerz/
        fi
        if [ -f ../artifacts/u-cli/u-cli_amd64.deb ]; then
          cp ../artifacts/u-cli/u-cli_amd64.deb apt/u-cli/
        fi

        # Copy binaries to releases directory
        if [ -d ../artifacts/dockerz ]; then
          cp ../artifacts/dockerz/dockerz-linux-amd64.tar.gz releases/dockerz/ 2>/dev/null || true
          cp ../artifacts/dockerz/dockerz-darwin-amd64.tar.gz releases/dockerz/ 2>/dev/null || true
          cp ../artifacts/dockerz/dockerz-windows-amd64.zip releases/dockerz/ 2>/dev/null || true
        fi
        if [ -d ../artifacts/u-cli ]; then
          cp ../artifacts/u-cli/u-cli-linux-amd64.tar.gz releases/u-cli/ 2>/dev/null || true
          cp ../artifacts/u-cli/u-cli-darwin-amd64.tar.gz releases/u-cli/ 2>/dev/null || true
          cp ../artifacts/u-cli/u-cli-windows-amd64.zip releases/u-cli/ 2>/dev/null || true
        fi

        # Generate Packages.gz
        cd apt
        dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz

        # Generate Release file
        cat > Release << 'EOF'
        Origin: DevOps Toolkit
        Label: DevOps Toolkit Repository
        Suite: stable
        Codename: stable
        Version: 1.0
        Architectures: amd64
        Components: main
        Description: DevOps Toolkit Debian Repository
        Date: $(date -R)
        EOF

        # Sign Release file (requires GPG key)
        if [ -n "$GPG_PRIVATE_KEY" ]; then
          echo "$GPG_PRIVATE_KEY" | gpg --import --batch --yes
          gpg --detach-sign --armor --output Release.gpg Release
          gpg --clearsign --output InRelease Release
        fi

    - name: Commit and push changes
      run: |
        cd install-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update apt repository with latest packages

          - Updated dockerz and u-cli packages
          - Regenerated Packages.gz and Release files
          - Added latest binary releases"
          git push
        fi

    env:
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}