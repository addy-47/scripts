name: Release U-CLI

on:
  push:
    branches: [ master ]
    paths:
      - 'u-cli/**'
  pull_request:
    branches: [ master ]
    paths:
      - 'u-cli/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Test
      run: |
        cd u-cli
        go test ./...

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build cross-platform binaries
      run: |
        cd u-cli
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -o ../u-cli-linux-amd64 ./main.go
        GOOS=linux GOARCH=arm64 go build -o ../u-cli-linux-arm64 ./main.go
        GOOS=darwin GOARCH=amd64 go build -o ../u-cli-darwin-amd64 ./main.go
        GOOS=darwin GOARCH=arm64 go build -o ../u-cli-darwin-arm64 ./main.go
        GOOS=windows GOARCH=amd64 go build -o ../u-cli-windows-amd64.exe ./main.go

    - name: Create release archives
      run: |
        # Create tar.gz archives for Unix systems
        tar -czf u-cli-linux-amd64.tar.gz u-cli-linux-amd64
        tar -czf u-cli-linux-arm64.tar.gz u-cli-linux-arm64
        tar -czf u-cli-darwin-amd64.tar.gz u-cli-darwin-amd64
        tar -czf u-cli-darwin-arm64.tar.gz u-cli-darwin-arm64

        # Create zip archive for Windows
        zip u-cli-windows-amd64.zip u-cli-windows-amd64.exe

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: u-cli-$(date +%Y%m%d-%H%M%S)
        release_name: U-CLI Release
        draft: false
        prerelease: false

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./u-cli-linux-amd64.tar.gz
        asset_name: u-cli-linux-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Linux ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./u-cli-linux-arm64.tar.gz
        asset_name: u-cli-linux-arm64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Darwin AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./u-cli-darwin-amd64.tar.gz
        asset_name: u-cli-darwin-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Darwin ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./u-cli-darwin-arm64.tar.gz
        asset_name: u-cli-darwin-arm64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./u-cli-windows-amd64.zip
        asset_name: u-cli-windows-amd64.zip
        asset_content_type: application/zip

  build-deb:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build .deb packages
      run: |
        cd u-cli
        # Update changelog with current version
        VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
        sed -i "s/u-cli (.*)/u-cli ($VERSION)/" debian/changelog

        # Build .deb package
        dpkg-buildpackage -us -uc

        # Move .deb files to workspace root
        mv ../u-cli_*.deb ../../

    - name: Upload .deb artifacts
      uses: actions/upload-artifact@v3
      with:
        name: u-cli-deb-packages
        path: u-cli_*.deb

  update-install-branch:
    needs: [release, build-deb]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
      with:
        ref: install
        path: install-branch

    - name: Download .deb artifacts
      uses: actions/download-artifact@v3
      with:
        name: u-cli-deb-packages
        path: install-branch/apt/u-cli/

    - name: Update apt repository metadata
      run: |
        cd install-branch/apt

        # Generate Packages.gz
        dpkg-scanpackages u-cli /dev/null | gzip -9c > Packages.gz

        # Generate Release file
        cat > Release << 'EOF'
        Origin: DevOps Toolkit
        Label: DevOps Toolkit Repository
        Suite: stable
        Codename: stable
        Version: 1.0
        Architectures: amd64 arm64
        Components: main
        Description: DevOps Toolkit Repository
        Date: $(date -R)
        EOF

        # Sign Release file (if GPG key available)
        if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import --batch --yes
          gpg --detach-sign --armor --output Release.gpg Release
          gpg --clearsign --output InRelease Release
        fi

    - name: Commit and push changes
      run: |
        cd install-branch
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add .
        git commit -m "Update u-cli packages and repository metadata" || echo "No changes to commit"
        git push origin install