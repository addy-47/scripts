---
- name: Provision VM 
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    # Docker configuration variables
    docker_users:
      - "{{ default('addy') }}"
    docker_timeout: 300

  tasks:
    # System updates and prerequisites
    - name: Update apt package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
        lock_timeout: 120
      register: apt_update_result
      retries: 3
      delay: 10
      until: apt_update_result is succeeded
      
    - name: Install Docker prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present
        lock_timeout: 120
      register: prereq_result
      retries: 3
      delay: 5
      until: prereq_result is succeeded

    - name: Install basic system tools
      apt:
        name:
          - curl
          - wget
          - git
          - htop
          - tree
          - unzip
          - jq
          - vim
          - net-tools
          - dnsutils
          - telnet
          - ncdu
          - tmux
        state: present
        lock_timeout: 120
      register: tools_result
      retries: 3
      delay: 5
      until: tools_result is succeeded

    # Docker installation
    - name: Create Docker keyring directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
        
    - name: Add Docker GPG key
      block:
        - name: Download Docker GPG key
          get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /tmp/docker.gpg
            mode: '0644'
          register: gpg_download
          retries: 3
          delay: 5
          until: gpg_download is succeeded
          
        - name: Import Docker GPG key
          shell: |
            gpg --dearmor < /tmp/docker.gpg > /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg
          args:
            creates: /etc/apt/keyrings/docker.gpg
      rescue:
        - name: Log GPG key installation failure
          debug:
            msg: "Failed to install Docker GPG key. Attempting alternative method..."
            
        - name: Add Docker GPG key (alternative method)
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
          register: alt_gpg_result
          retries: 3
          delay: 5
          until: alt_gpg_result is succeeded

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
      register: repo_result
      retries: 3
      delay: 5
      until: repo_result is succeeded
      
    - name: Update apt cache after adding Docker repository
      apt:
        update_cache: yes
        cache_valid_time: 0
        lock_timeout: 120
      register: docker_apt_update
      retries: 3
      delay: 10
      until: docker_apt_update is succeeded

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
        lock_timeout: 120
      register: docker_install
      retries: 3
      delay: 10
      until: docker_install is succeeded
      notify:
        - start docker
        - enable docker

    # Docker service configuration
    - name: Ensure Docker service is started and enabled
      systemd:
        name: docker
        state: started
        enabled: yes
        daemon_reload: yes
      register: docker_service
      retries: 3
      delay: 5
      until: docker_service is succeeded

    - name: Wait for Docker socket to be available
      wait_for:
        path: /var/run/docker.sock
        state: present
        timeout: 60
      register: docker_socket_wait
      retries: 3
      delay: 10
      until: docker_socket_wait is succeeded

    # User configuration
    - name: Create docker group
      group:
        name: docker
        state: present

    - name: Add users to docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop: "{{ docker_users }}"
      when: docker_users is defined and docker_users | length > 0

    # Network tools installation
    - name: Install additional network tools
      apt:
        name:
          - tcpdump
          - iperf3
          - nmap
          - iputils-ping
        state: present
        lock_timeout: 120
      register: network_tools_result
      retries: 2
      delay: 5
      until: network_tools_result is succeeded
      ignore_errors: yes

    # Monitoring tools installation
    - name: Install monitoring tools
      apt:
        name:
          - htop
          - iotop
          - nethogs
          - iftop
        state: present
        lock_timeout: 120
      register: monitoring_tools_result
      retries: 2
      delay: 5
      until: monitoring_tools_result is succeeded
      ignore_errors: yes

    # UFW firewall configuration
    - name: Configure UFW firewall rules
      block:
        - name: Allow SSH, HTTP, and HTTPS ports
          ufw:
            rule: allow
            port: "{{ item }}"
            proto: tcp
          loop:
            - 22
            - 80
            - 443
          notify: enable ufw
      rescue:
        - name: Log UFW configuration failure
          debug:
            msg: "UFW configuration failed, continuing without firewall setup"
      ignore_errors: yes

    # Verification tasks
    - name: Verify Docker installation
      block:
        - name: Check Docker version
          command: docker --version
          register: docker_version_check
          changed_when: false
          
        - name: Check Docker Compose version
          command: docker compose version
          register: docker_compose_version_check
          changed_when: false
          
        - name: Display Docker version
          debug:
            msg: "Docker version: {{ docker_version_check.stdout }}"
            
        - name: Display Docker Compose version
          debug:
            msg: "Docker Compose version: {{ docker_compose_version_check.stdout }}"

      rescue:
        - name: Log verification failure
          debug:
            msg: "Docker verification failed, but installation may still be functional"

    # System cleanup
    - name: Clean up temporary files
      file:
        path: /tmp/docker.gpg
        state: absent
      ignore_errors: yes

    # Final status report
    - name: Display installation summary
      debug:
        msg: |
          ================================
          VM Provisioning Complete!
          ================================
          System: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Architecture: {{ ansible_architecture }}
          Docker: {{ docker_version_check.stdout | default('Version check failed') }}
          Docker Compose: {{ docker_compose_version_check.stdout | default('Version check failed') }}
          Docker Users: {{ docker_users | join(', ') }}
          ================================

  handlers:
    - name: start docker
      systemd:
        name: docker
        state: started
        
    - name: enable docker
      systemd:
        name: docker
        enabled: yes
        
    - name: enable ufw
      ufw:
        state: enabled
        policy: deny
      ignore_errors: yes

  post_tasks:
    - name: Final system status check
      block:
        - name: Check if Docker daemon is running
          systemd:
            name: docker
          register: docker_status
          
        - name: Verify Docker group membership
          command: groups {{default('addy') }}
          register: user_groups
          changed_when: false
          
        - name: Display final status
          debug:
            msg: |
              Docker Service Status: {{ docker_status.status.ActiveState | default('unknown') }}
              User Groups: {{ user_groups.stdout | default('check failed') }}
              
              IMPORTANT: If user was added to docker group, logout and login again to apply changes.
              Alternatively, run: newgrp docker
      rescue:
        - name: Log post-task failure
          debug:
            msg: "Post-task checks failed, but installation should be complete"
